{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor() {\n      this.alertsSubject = new BehaviorSubject([]);\n      this.confirmDialogSubject = new BehaviorSubject(null);\n      this.alerts$ = this.alertsSubject.asObservable();\n      this.confirmDialog$ = this.confirmDialogSubject.asObservable();\n    }\n    // Success alert\n    success(title, message, duration = 5000) {\n      return this.addAlert({\n        id: this.generateId(),\n        type: 'success',\n        title,\n        message,\n        duration,\n        showCloseButton: true\n      });\n    }\n    // Error alert\n    error(title, message, duration = 0) {\n      return this.addAlert({\n        id: this.generateId(),\n        type: 'error',\n        title,\n        message,\n        duration,\n        showCloseButton: true\n      });\n    }\n    // Warning alert\n    warning(title, message, duration = 5000) {\n      return this.addAlert({\n        id: this.generateId(),\n        type: 'warning',\n        title,\n        message,\n        duration,\n        showCloseButton: true\n      });\n    }\n    // Info alert\n    info(title, message, duration = 5000) {\n      return this.addAlert({\n        id: this.generateId(),\n        type: 'info',\n        title,\n        message,\n        duration,\n        showCloseButton: true\n      });\n    }\n    // Add custom alert\n    addAlert(alert) {\n      const alerts = [...this.alertsSubject.value, alert];\n      this.alertsSubject.next(alerts);\n      // Auto-close if duration is set\n      if (alert.duration && alert.duration > 0) {\n        setTimeout(() => {\n          this.removeAlert(alert.id);\n        }, alert.duration);\n      }\n      return alert.id;\n    }\n    // Remove alert\n    removeAlert(id) {\n      const alerts = this.alertsSubject.value.filter(alert => alert.id !== id);\n      this.alertsSubject.next(alerts);\n    }\n    // Clear all alerts\n    clearAll() {\n      this.alertsSubject.next([]);\n    }\n    // Show confirmation dialog\n    confirm(title, message, onConfirm, options) {\n      const dialog = {\n        id: this.generateId(),\n        title,\n        message,\n        confirmText: options?.confirmText || 'Підтвердити',\n        cancelText: options?.cancelText || 'Скасувати',\n        type: options?.type || 'warning',\n        onConfirm,\n        onCancel: options?.onCancel\n      };\n      this.confirmDialogSubject.next(dialog);\n    }\n    // Close confirmation dialog\n    closeConfirmDialog() {\n      this.confirmDialogSubject.next(null);\n    }\n    // Execute confirmation\n    executeConfirm() {\n      const dialog = this.confirmDialogSubject.value;\n      if (dialog) {\n        dialog.onConfirm();\n        this.closeConfirmDialog();\n      }\n    }\n    // Execute cancel\n    executeCancel() {\n      const dialog = this.confirmDialogSubject.value;\n      if (dialog && dialog.onCancel) {\n        dialog.onCancel();\n      }\n      this.closeConfirmDialog();\n    }\n    generateId() {\n      return Math.random().toString(36).substr(2, 9);\n    }\n    static {\n      this.ɵfac = function AlertService_Factory(t) {\n        return new (t || AlertService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AlertService,\n        factory: AlertService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AlertService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}