{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = 'https://rus-backend-production.up.railway.app/api';\n      this.tokenSubject = new BehaviorSubject(this.getToken());\n      this.token$ = this.tokenSubject.asObservable();\n    }\n    // Token management\n    getToken() {\n      return localStorage.getItem('auth_token');\n    }\n    setToken(token) {\n      localStorage.setItem('auth_token', token);\n      this.tokenSubject.next(token);\n    }\n    removeToken() {\n      localStorage.removeItem('auth_token');\n      this.tokenSubject.next(null);\n    }\n    getHeaders() {\n      const token = this.getToken();\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        })\n      });\n    }\n    // Authentication\n    login(email, password) {\n      return this.http.post(`${this.API_URL}/auth/login`, {\n        email,\n        password\n      }).pipe(tap(response => this.setToken(response.token)));\n    }\n    logout() {\n      this.removeToken();\n    }\n    getCurrentUser() {\n      return this.http.get(`${this.API_URL}/auth/me`, {\n        headers: this.getHeaders()\n      });\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    // Articles\n    getArticles(published = true) {\n      const params = published ? '?published=true' : '';\n      return this.http.get(`${this.API_URL}/articles${params}`);\n    }\n    getArticle(id) {\n      return this.http.get(`${this.API_URL}/articles/${id}`);\n    }\n    createArticle(article) {\n      return this.http.post(`${this.API_URL}/articles`, article, {\n        headers: this.getHeaders()\n      });\n    }\n    updateArticle(id, article) {\n      return this.http.put(`${this.API_URL}/articles/${id}`, article, {\n        headers: this.getHeaders()\n      });\n    }\n    deleteArticle(id) {\n      return this.http.delete(`${this.API_URL}/articles/${id}`, {\n        headers: this.getHeaders()\n      });\n    }\n    publishArticle(id, published) {\n      return this.http.patch(`${this.API_URL}/articles/${id}/publish`, {\n        published\n      }, {\n        headers: this.getHeaders()\n      });\n    }\n    // Gallery\n    getGalleryImages(published = true) {\n      const params = published ? '?published=true' : '';\n      return this.http.get(`${this.API_URL}/gallery${params}`);\n    }\n    getGalleryImage(id) {\n      return this.http.get(`${this.API_URL}/gallery/${id}`);\n    }\n    createGalleryImage(image) {\n      return this.http.post(`${this.API_URL}/gallery`, image, {\n        headers: this.getHeaders()\n      });\n    }\n    updateGalleryImage(id, image) {\n      return this.http.put(`${this.API_URL}/gallery/${id}`, image, {\n        headers: this.getHeaders()\n      });\n    }\n    deleteGalleryImage(id) {\n      return this.http.delete(`${this.API_URL}/gallery/${id}`, {\n        headers: this.getHeaders()\n      });\n    }\n    reorderGalleryImages(images) {\n      return this.http.patch(`${this.API_URL}/gallery/reorder`, {\n        images\n      }, {\n        headers: this.getHeaders()\n      });\n    }\n    publishGalleryImage(id, published) {\n      return this.http.patch(`${this.API_URL}/gallery/${id}/publish`, {\n        published\n      }, {\n        headers: this.getHeaders()\n      });\n    }\n    // File Upload\n    uploadFile(file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      const headers = new HttpHeaders();\n      const token = this.getToken();\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return this.http.post(`${this.API_URL}/upload/single`, formData, {\n        headers\n      });\n    }\n    uploadMultipleFiles(files) {\n      const formData = new FormData();\n      files.forEach(file => formData.append('files', file));\n      const headers = new HttpHeaders();\n      const token = this.getToken();\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return this.http.post(`${this.API_URL}/upload/multiple`, formData, {\n        headers\n      });\n    }\n    deleteFile(filename) {\n      return this.http.delete(`${this.API_URL}/upload/${filename}`, {\n        headers: this.getHeaders()\n      });\n    }\n    // Contact\n    sendContactMessage(message) {\n      return this.http.post(`${this.API_URL}/contact`, message);\n    }\n    getContactMessages(limit = 50, offset = 0, read) {\n      let params = `?limit=${limit}&offset=${offset}`;\n      if (read !== undefined) {\n        params += `&read=${read}`;\n      }\n      return this.http.get(`${this.API_URL}/contact${params}`, {\n        headers: this.getHeaders()\n      });\n    }\n    getContactMessage(id) {\n      return this.http.get(`${this.API_URL}/contact/${id}`, {\n        headers: this.getHeaders()\n      });\n    }\n    markContactMessageAsRead(id, read = true) {\n      return this.http.patch(`${this.API_URL}/contact/${id}/read`, {\n        read\n      }, {\n        headers: this.getHeaders()\n      });\n    }\n    deleteContactMessage(id) {\n      return this.http.delete(`${this.API_URL}/contact/${id}`, {\n        headers: this.getHeaders()\n      });\n    }\n    getContactStats() {\n      return this.http.get(`${this.API_URL}/contact/stats/overview`, {\n        headers: this.getHeaders()\n      });\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}